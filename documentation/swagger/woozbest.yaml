swagger: "2.0"
info:
  description: "API doc de Woozbest"
  version: "1.0.0"
  title: "Woozbest"
  #termsOfService: "#"
  contact:
    email: "moshi@moshi.fr"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "api.woozbest.com"
basePath: "/"
tags:
- name: "top"
  description: "Les tops"
  #externalDocs:
  #  description: "Find out more"
  #  url: "http://swagger.io"
- name: "user"
  description: "Utilisateurs & Utilisateur vedette"

- name: "search"
  description: "Recherche dans les tops & users"

schemes:
- "https"
paths:
  /top:
    post:
      tags:
      - "top"
      summary: "Ajouter un nouveau top"
      description: ""
      operationId: "addTop"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: header
        name: "Accept"
        description: "Accept: application/vnd.woozbest.v1+json"
        required: true
        schema:
            type: string
      - in: header
        name: uuid
        description: "uuid de l'utilisateur"
        required: true
        schema:
            type: string
            format: uuid
      - in: "body"
        name: "body"
        description: "Corps du top à ajouter"
        required: true
        schema:
          $ref: "#/definitions/Top"
      responses:
        405:
          description: "Invalid input"
      security:
      - tops_auth:
        - "write:tops"
        - "read:tops"
  /top/around:
    get:
      tags:
      - "top"
      summary: "Tops autour de moi"
      description: "Retour les tops autour de Soit lat+long soit département "
      operationId: "topByAround"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "where"
        in: "query"
        description: "Lat+long ou département fr"
        required: true
        type: "string"
        items:
          type: "string"
          default: "0"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Top"
        400:
          description: "Invalid status value"
      security:
      - tops_auth:
        - "write:tops"
        - "read:tops"
  /top/friends:
    get:
      tags:
      - "top"
      summary: "Top de ses amis"
      description: "Retourne les tops de ces amis "
      operationId: "topsByFriends"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Top"
        400:
          description: "Invalid tag value"
      security:
      - tops_auth:
        - "write:tops"
        - "read:tops"
  /top/{topId}:
    get:
      tags:
      - "top"
      summary: "Trouver un top par ID"
      description: "Retourne un seul top par id"
      operationId: "getTopById"
      produces:
      - "application/json"
      parameters:
      - name: "topId"
        in: "path"
        description: "Top ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Top"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Top not found"
    post:
      tags:
      - "top"
      summary: "Mise à jour totale d'un de ses tops "
      description: ""
      operationId: "updateTopForm"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "topId"
        in: "path"
        description: "Top ID à mettre à jour"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Corps du top à ajouter"
        required: true
        schema:
          $ref: "#/definitions/Top"
      responses:
        405:
          description: "Invalid input"
      security:
      - tops_auth:
        - "write:tops"
        - "read:tops"
    put:
      tags:
      - "top"
      summary: "Mise à jour partielle d'un de ses tops "
      description: ""
      operationId: "updateTop"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "topId"
        in: "path"
        description: "ID of top that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Corps du top à ajouter"
        required: true
        schema:
          $ref: "#/definitions/Top"
      responses:
        405:
          description: "Invalid input"
      security:
      - tops_auth:
        - "write:tops"
        - "read:tops"
    delete:
      tags:
      - "top"
      summary: "Deletes a top"
      description: ""
      operationId: "deleteTop"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        description: "Permet d'identifier l'utilisateur pour supprimer que ses tops"
        type: "string"
      - name: "topId"
        in: "path"
        description: "Top id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Top not found"
      security:
      - tops_auth:
        - "write:tops"
        - "read:tops"

  /tops/{idTop}/comments:
    get:
      tags:
      - "comments"
      summary: "Liste des commentaires de ce top"
      operationId: "getComments"
      parameters:
      - in: path
        name: "idTop"
        description: "Top ID"
        required: true
      - in: "query"
        name: "limit"
        description: "Limit "
        type: "integer"
        default: 0
        minimum: 0
      - in: "query"
        name: "offset"
        description: "Offset"
        type: "integer"
      responses:
        default:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
    post:
      tags:
      - "comments"
      summary: "Add comment"
      description: ""
      operationId: "addComment"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "idTop"
        description: "Top ID"
        required: true
      - in: "body"
        name: "body"
        description: "body"
        schema:
          $ref: "#/definitions/Comment"
      responses:
        default:
          description: "successful operation"
  /tops/{idTop}/comments/{idComment}:
    post:
      tags:
      - "comments"
      summary: "Add comment"
      description: ""
      operationId: "updateCommentData"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "idTop"
        description: "Top ID"
        required: true
      - in: "path"
        name: "idComment"
        description: "Comment ID"
        required: true
      - in: "body"
        name: "body"
        description: "body"
        schema:
          $ref: "#/definitions/Comment"
      responses:
        default:
          description: "successful operation"
    delete:
      tags:
      - "comments"
      summary: "Delete comment"
      operationId: "deleteComment"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "idTop"
        description: "Top ID"
        required: true
      - in: "path"
        name: "idComment"
        description: "Comment ID"
        required: true
      responses:
        400:
          description: "Invalid information supplied"
        404:
          description: "User not found"
  /search/{word}:
    post:
      tags:
      - "search"
      summary: "Search tops & user"
      description: ""
      operationId: "search"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "word"
        description: "mots à chercher séparés par des ,"
        required: true
        type: "string"
      responses:
        200:
          description: "Recherche par mot"
  /search/{word}/{type}:
    get:
      tags:
      - "search"
      summary: "Search tops & user"
      description: ""
      operationId: "searchByType"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "word"
        description: "mot à chercher"
        required: true
        type: "string"
      - in: "path"
        name: "type"
        description: "type : utilisateur ou tops"
        required: true
        type: "string"
      responses:
        200:
          description: "Recherche par mot et par type de publication"
  /palmares:
    get:
      tags:
      - "palmares"
      summary: "Liste des palmares"
      operationId: "getAllPalmares"
      responses:
        default:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Palmares"
    post:
      tags:
      - "palmares"
      summary: "Ajouter un nouveau palmares"
      description: ""
      operationId: "addPalmares"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Corps du palmares à ajouter"
        required: true
        schema:
          $ref: "#/definitions/Palmares"
      responses:
        405:
          description: "Invalid input"
      security:
      - tops_auth:
        - "write:palmares"
        - "read:palmares"
  /vedettes:
    get:
      tags:
      - "user"
      summary: "Liste des utilisateurs vedettes et amis par date de connexion et popularité"
      operationId: "getVedettes"
      responses:
        default:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
  /vedettes/story:
    get:
      tags:
      - "user"
      summary: "Liste des utilisateurs vedettes et amis par date de connexion et popularité"
      operationId: "getVedettesStory"
      responses:
        default:
          description: "successful operation"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "Inscription d'un utilisateur"
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/me/palmares:
    get:
      tags:
      - "palmares"
      summary: "Liste de mes palmares"
      operationId: "getAllMyPalmares"
      responses:
        default:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Palmares"

  /user/{username}/palmares:
    get:
      tags:
      - "palmares"
      summary: "Liste des palmares de user"
      operationId: "getAllUserPalmares"
      parameters:
        - name: "username"
          in: "path"
          description: "The user name"
          required: true
          type: "string"
      responses:
        default:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Palmares"


  /user/{username}/palmares/{idPalmares}:
    get:
      tags:
      - "palmares"
      summary: "Palmares "
      operationId: "getPalmaresById"
      parameters:
        - name: "username"
          in: "path"
          required: true
          description: "The user name"
          type: "string"
        - name: "idPalmares"
          in: "path"
          required: true
          description: "The Palmares ID"
          type: "string"
      responses:
        default:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Palmares"
    post:
      tags:
      - "palmares"
      summary: "Modifier un nouveau palmares"
      description: ""
      operationId: "updPalmaresData"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
        - name: "username"
          in: "path"
          required: true
          description: "The user name"
          type: "string"
        - name: "idPalmares"
          in: "path"
          description: "The Palmares ID"
          type: "string"
          required: true
        - in: "body"
          name: "body"
          description: "Corps du palmares à modifier"
          required: true
          schema:
            $ref: "#/definitions/Palmares"
      responses:
        405:
          description: "Invalid input"
      security:
      - tops_auth:
        - "write:palmares"
        - "read:palmares"
    put:
      tags:
      - "palmares"
      summary: "Modifier un nouveau palmares"
      description: ""
      operationId: "updPalmares"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The user name"
          type: "string"
          required: true
        - name: "idPalmares"
          in: "path"
          description: "The Palmares ID"
          type: "string"
          required: true
        - in: "body"
          name: "body"
          description: "Corps du palmares à modifier"
          required: true
          schema:
            $ref: "#/definitions/Palmares"
      responses:
        405:
          description: "Invalid input"
      security:
      - tops_auth:
        - "write:palmares"
        - "read:palmares"
  /user/check_login:
    get:
      tags:
      - "user"
      summary: "Check if user is connected"
      operationId: "checkLogin"
      parameters:
        - name: "username"
          in: "query"
          description: "The user name for login"
          required: true
          type: "string"
      responses:
        200:
          description: "successfull operation"
          schema:
            $ref: "#/definitions/User"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  tops_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:tops: "modify tops in your account"
      read:tops: "read your tops"
      write:palmares: "modify palmares in your account"
      read:palmares: "read your palmares"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Top:
    type: "object"
    required:
    - "title"
    - "user"
    - "categories"
    properties:
      id:
        type: "integer"
        format: "int64"
      topId:
        type: "integer"
        format: "int64"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
      deletedAt:
        type: "string"
        format: "date-time"
      title:
        type: "string"
        description: "Titre"
      description:
        type: "string"
        description: "Description"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
      image:
        type: "string"
      nbLike:
        type: "integer"

      categories:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
      user:
        $ref: "#/definitions/User"
    xml:
      name: "Top"
  User:
    type: "object"
    required:
    - "username"
    - "email"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
      certified:
        type: "boolean"
        description: "Utilisateur vedette ?"
    xml:
      name: "User"
  Comment:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      text:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
      deletedAt:
        type: "string"
        format: "date-time"
      publication:
        $ref: "#/definitions/Top"
      user:
        $ref: "#/definitions/User"
      commentParent:
        $ref: "#/definitions/Comment"
    xml:
      name: "Tag"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Palmares:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      bests:
        type: "array"
        items:
          $ref: "#/definitions/Top"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
      deletedAt:
        type: "string"
        format: "date-time"
      user:
        $ref: "#/definitions/User"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
